#2.1=======================================

#code 

def f2c(f):
    c = (f -32) * 5 / 9
    print(f, c)

for f in range(0, 101, 10):
    f2c(f)

#output

(0, -18)
(10, -13)
(20, -7)
(30, -2)
(40, 4)
(50, 10)
(60, 15)
(70, 21)
(80, 26)
(90, 32)
(100, 37)

#.2.2===============================================

#code 


def f2c_a(f):
    c = (f -32) * 5 / 9
    c_a = (f - 30) / 2
    print(f, c, c_a)

for f in range(0, 101, 10):
    f2c_a(f)

#output

(0, -18, -15)
(10, -13, -10)
(20, -7, -5)
(30, -2, 0)
(40, 4, 5)
(50, 10, 10)
(60, 15, 15)
(70, 21, 20)
(80, 26, 25)
(90, 32, 30)
(100, 37, 35)

#2.3===========================================

#code 

def odd(n):
    i = 1
    while i < n:
        if i % 2 == 1:
            print(i)        
        i += 1

n = 10

odd(n)

#output

1
3
5
7
9

# 2.4 ====================================


#code 

def odd(n):
    i = 1
    odd_num = []
    while i < n:
        if i % 2 == 1:
            odd_num.append(i)   
        i += 1
    return odd_num

n = 10
odd_num = odd(n)
print(odd_num)

#output

[1, 3, 5, 7, 9]

#2.5 =====================

#code 

n = 10
print([x for x in range(n) if x % 2 == 1])

#output

[1, 3, 5, 7, 9]

# 2.6 ============================================

#code 

n = 11
v = 1
g = 9.81
step = 2 * v / g / (n - 1)

for i in range(n):
    t = step * i
    d = v * t - g * t ** 2 / 2.0
    print(t, d)

#output

(0.0, 0.0)
(0.02038735983690112, 0.018348623853211007)
(0.04077471967380224, 0.03261977573904179)
(0.061162079510703356, 0.04281345565749235)
(0.08154943934760447, 0.04892966360856269)
(0.1019367991845056, 0.0509683995922528)
(0.12232415902140671, 0.0489296636085627)
(0.14271151885830782, 0.04281345565749235)
(0.16309887869520895, 0.03261977573904182)
(0.18348623853211007, 0.018348623853211038)
(0.2038735983690112, 0.0)
    
#2.7=====================================

n = 11
v = 1
g = 9.81
step = 2 * v / g / (n - 1)

t = []
y = []
for i in range(n):
    ti = i * step
    t.append(ti)
    y.append(v * ti - g * ti ** 2 / 2)

for i in range(n):
    print('t = {0:4.2f} |y = {1:4.2f}'.format(t[i], y[i]))

#output

t = 0.00 |y = 0.00
t = 0.02 |y = 0.02
t = 0.04 |y = 0.03
t = 0.06 |y = 0.04
t = 0.08 |y = 0.05
t = 0.10 |y = 0.05
t = 0.12 |y = 0.05
t = 0.14 |y = 0.04
t = 0.16 |y = 0.03
t = 0.18 |y = 0.02
t = 0.20 |y = 0.00

# 2.8================================



#code 


prime = [2, 3, 5, 7]
for p in prime:
    print(p)

a = 17
prime.append(a)
for p in prime:
    print(p)


#output

2
3
5
7
2
3
5
7
17

#2.9===========================================

a = [1, 3, 5, 7, 11]
b = [13, 17]
c = a + b
print c
b[0] = -1
d = [e+1 for e in a]
print d
d.append(b[0] + 1)
d.append(b[-1] + 1)
print d[-2:]

#output

[1, 3, 5, 7, 11, 13, 17] => a and b concat together

[2, 4, 6, 8, 12] => element in a but +1

[0, 18] => the last two element in d

#2.10==================================

x = 1.0
step = 0.01
v = []
for i in range(101):
    v.append(x)
    x += step

#2.11 =======================

[1 + 0.01 * x for x in range(101)]


#2.12 =============================

s = 0; k = 1; M = 100
while k <= M:
    s += 1.0 / k
    k += 1
print s


5.18737751764

need to increment k in the while loop
need to use float div
need to use <=


#2.13 ===============================


s = 0; k = 1; M = 100
for k in range(1, M + 1)
    s += 1.0 / k
print s

5.18737751764

#2.21 ======================================

#code 

flist = range(0, 101, 10)
clist = [(f - 32) * 5 / 9.0 for f in flist]
calist = [(f - 30) / 2.0 for f in flist]
conversion = [flist, clist, calist]
for i in range(len(flist)):
    print(flist[i], clist[i], calist[i])

#output

(0, -17.77777777777778, -15.0)
(10, -12.222222222222221, -10.0)
(20, -6.666666666666667, -5.0)
(30, -1.1111111111111112, 0.0)
(40, 4.444444444444445, 5.0)
(50, 10.0, 10.0)
(60, 15.555555555555555, 15.0)
(70, 21.11111111111111, 20.0)
(80, 26.666666666666668, 25.0)
(90, 32.22222222222222, 30.0)
(100, 37.77777777777778, 35.0)


#2.27 ======================================

#code 

eps = 1.0
while 1.0 != 1.0 + eps:
    print ('...............', eps)
    eps = eps/2.0
print('final eps:', eps)

#output

('...............', 1.0)
('...............', 0.5)
('...............', 0.25)
('...............', 0.125)
('...............', 0.0625)
('...............', 0.03125)
('...............', 0.015625)
('...............', 0.0078125)
('...............', 0.00390625)
('...............', 0.001953125)
('...............', 0.0009765625)
('...............', 0.00048828125)
('...............', 0.000244140625)
('...............', 0.0001220703125)
('...............', 6.103515625e-05)
('...............', 3.0517578125e-05)
('...............', 1.52587890625e-05)
('...............', 7.62939453125e-06)
('...............', 3.814697265625e-06)
('...............', 1.9073486328125e-06)
('...............', 9.5367431640625e-07)
('...............', 4.76837158203125e-07)
('...............', 2.384185791015625e-07)
('...............', 1.1920928955078125e-07)
('...............', 5.960464477539063e-08)
('...............', 2.9802322387695312e-08)
('...............', 1.4901161193847656e-08)
('...............', 7.450580596923828e-09)
('...............', 3.725290298461914e-09)
('...............', 1.862645149230957e-09)
('...............', 9.313225746154785e-10)
('...............', 4.656612873077393e-10)
('...............', 2.3283064365386963e-10)
('...............', 1.1641532182693481e-10)
('...............', 5.820766091346741e-11)
('...............', 2.9103830456733704e-11)
('...............', 1.4551915228366852e-11)
('...............', 7.275957614183426e-12)
('...............', 3.637978807091713e-12)
('...............', 1.8189894035458565e-12)
('...............', 9.094947017729282e-13)
('...............', 4.547473508864641e-13)
('...............', 2.2737367544323206e-13)
('...............', 1.1368683772161603e-13)
('...............', 5.684341886080802e-14)
('...............', 2.842170943040401e-14)
('...............', 1.4210854715202004e-14)
('...............', 7.105427357601002e-15)
('...............', 3.552713678800501e-15)
('...............', 1.7763568394002505e-15)
('...............', 8.881784197001252e-16)
('...............', 4.440892098500626e-16)
('...............', 2.220446049250313e-16)
('final eps:', 1.1102230246251565e-16)

